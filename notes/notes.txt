two passes or one? (can you call a functions that is defined later on in the same source file?)

    node does this!
        foo();

        function foo() {
            console.log("hi");
        }

    php is ok with this!

        <?php
        foo();

        function foo() {
         echo "hi";
        }

    python gives an error!

        foo()

        def foo():
            print("hi")

        python t.py
        Traceback (most recent call last):
          File "t.py", line 3, in <module>
            foo()
        NameError: name 'foo' is not defined


Passing more arguments then defined in function

    javascript does not enforce it

    node
        Welcome to Node.js v19.2.0.
        Type ".help" for more information.
        > function foo(x) {
        ... console.log("arg: " + x);
        ... }
        undefined
        > foo("123")
        arg: 123
        undefined
        > foo()
        arg: undefined
        undefined
        > foo("123",1,2)
        arg: 123
        undefined

    python requires to pass the exact number of arguments

        python
        >>>
        >>> def foo(x):
        ...     print(x)
        ...
        >>> foo("123")
        123
        >>> foo("123",1)
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: foo() takes 1 positional argument but 2 were given
        object ids
        >>> foo()
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: foo() missing 1 required positional argument: 'x'

    php is also not happy

        php > function foo($a) {
        php {  echo ">{$a}";
        php { }
        php >
        php >
        php > foo(1);
        >1
        php > foo("abc");
        >abc

        php > foo(1,2,3);
        PHP Parse error:  syntax error, unexpected 'foo' (T_STRING) in php shell code on line 2

        Parse error: syntax error, unexpected 'foo' (T_STRING) in php shell code on line 2

        php > foo();
        PHP Warning:  Uncaught ArgumentCountError: Too few arguments to function foo(), 0 passed in php shell code on line 1 and exactly 1 expected in php shell code:1
        Stack trace:
        #0 php shell code(1): foo()
        #1 {main}
          thrown in php shell code on line 1

        Warning: Uncaught ArgumentCountError: Too few arguments to function foo(), 0 passed in php shell code on line 1 and exactly 1 expected in php shell code:1
        Stack trace:
        #0 php shell code(1): foo()
        #1 {main}
          thrown in php shell code on line 1

Object identity  / when is a value copied by value or referenced?

    numbers/booleans are copied by value, strings (and everything else) by reference
    but strings duplicate upon modificatio!

    python
        Type "help", "copyright", "credits" or "license" for more information.
        >>> a="a"
        >>> b=a
        >>> id(a)==id(b)
        True

        >>> a+="a"              # copy on write
        >>> a
        'aa'
        >>> id(a)==id(b)
        False


        >>> class Foo():
            ...     def __init__(self,a):
        ...             self.a=a
        ...
        >>> a=Foo("aaa")
        >>> b=a
        >>> id(b.a) == id(a.a)
        True

        >>> a=1
        >>> b=a
        >>> id(a)==id(b)
        True


Conversion of booleans to numbers

    python3
        >>> a=1
        >>> b=a==1
        >>> print(b)
        True
        >>> b=b+1
        >>> print(b)
        2


    php -a
        Interactive shell

        php > $a=1;
        php > $b=$a==1;
        php > echo "{$b}";
        1
        php > $b=$b+1;
        php > echo "{$b}";
        2

None type / implicit conversions

    javascript has several aliases for them?
        undefined - variable has been defined, but not assigned value
        null - has been assigned something! 
        - but they are equal!!!

    node
        > undefined == null
        true


    python3
        >>> def fun():
        ...     pass
        ...
        >>> a=fun()
        >>> print(a)
        None
        >>> a=a+1
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'


    php -a
        Interactive shell

        php > function foo() {
        php { }
        php > $a=foo();
        php > echo "{$a}";
        php > $a=$a+1;
        php > echo "{$a}";
        1


Multiple assignment

    python3
        >>> def foo():
        ...     return 42
        ...
        >>> a,b = foo()
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: cannot unpack non-iterable int object


    php -a
        php > function foo2() {
        php { return [ 42 ];
        php { }
        php > list($a, $b)=foo2();
        PHP Notice:  Undefined offset: 1 in php shell code on line 1
        PHP Stack trace:
        PHP   1. {main}() php shell code:0

        Notice: Undefined offset: 1 in php shell code on line 1

        Call Stack:
          135.6439     503232   1. {main}() php shell code:0

Is last evaluated statement the return value? 
It is in Ruby and Perl5, not in Python, php, javascript. (in shell you need to echo the value back...)


    irb
    irb(main):001:0> def foo()
    irb(main):002:1> 42
    irb(main):003:1> end
    => :foo
    irb(main):004:0> a=foo()
    => 42

    but not in python, js and php!

    python
    >>> def foo():
    ...     42
    ...
    >>> a=foo()
    >>> print(a)
    None

    >>> def foo():
    ...     return 42
    ...
    >>> a=foo()
    >>> print(a)
    42

    node
    > function foo() {
    ... 42;
    ... }
    undefined
    > a=foo()
    undefined
    > function foo() {
    ... return 42;
    ... }
    undefined
    > a=foo()
    42

When is default function parameter evaluated?
Python - upon function declaration! That makes sense!

    python
    >>> def get_val():
    ...     print("get_val called")
    ...     return 42
    ...
    >>> def foo(a=get_val()):
    ...     print(f"foo called: a: {a}")
    ...
    get_val called

    >>> foo(12)
    foo called: a: 12

    >>> foo(0)
    foo called: a: 0
    >>>

It is also evaluated each time that a closure is created!!! When the function declaration is being evaluated !!!

    >>> def getf():
    ...     def foo(a=get_val()):
    ...             return a+1
    ...     return foo
    ...
    >>> a=getf()
    get_val
    >>> b=getf()
    get_val
    >>> c=getf()
    get_val
    >>> print(c(42))
    43
    >>> print(b(42))
    43
    >>> print(a(42))
    43
        
You can redefined standard library functions in python3

    python
    >>> print("aaa")
    aaa

    >>> import logging
    >>> logging.error("aaa")
    ERROR:root:aaa

    >>> def print(arg):
    ...     logging.error(arg)
    ...
    >>> print("hello world")
    ERROR:root:hello world

