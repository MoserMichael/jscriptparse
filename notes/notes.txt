
python can  tell you the id of an object  - builtin id(any_value); with javascript had that...
 
Map access

    javascript: you can use any type you want - as a key!!! that's amazing! (they are really assuming that the hash of the key is unique - i would have had my qualms...)

        node
        > a= {}
        {}
        > a[[1,2]]=1
        1
        > a[[1,2]]
        1

    python doesn't want to have that:

        >>> a={}
        >>> a[[1,2]]=1
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: unhashable type: 'list'


List/Array access

    basic usage 

        node
        Welcome to Node.js v19.6.0.
        Type ".help" for more information.
        > a=[1,2,3]
        [ 1, 2, 3 ]
        > a[100]=1
        1
        > a
        [ 1, 2, 3, <97 empty items>, 1 ]
        > a[4]
        undefined
        > a[100]
        1

    Now it gets weird: you can have indexes that are not round integers - and they are kept as special keys !!! (that's weird)

        > a=[1,2,3]
        [ 1, 2, 3 ]
        > a[0.5]
        undefined
        > a[1]
        2
        > a[0.5]=111
        111
        > a
        [ 1, 2, 3, '0.5': 111 ]

    You can't have that in python
        Python 3.7.13 (default, Sep 29 2022, 10:34:32)
        [Clang 14.0.0 (clang-1400.0.29.102)] on darwin
        Type "help", "copyright", "credits" or "license" for more information.

        >>> a=[1,2,3]
        >>> a[0.5]=1
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: list indices must be integers or slices, not float


        >>> a=[1,2,3]
        >>> a[2]
        3
        >>> a[100]=1
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        IndexError: list assignment index out of range
        >>> a
        [1, 2, 3]


    In python: you can access elements from the end of the list - with negative indexes! (confusing)

    >>> a[-1]
    3
    >>> a[-2]
    2


What's in an object?

    node
    Welcome to Node.js v19.2.0.
    Type ".help" for more information.
    > a={"a":1}
    { a: 1 }
    > a.a
    1
    > a['a']
    1

    python
    Python 3.7.13 (default, Sep 29 2022, 10:34:32)
    [Clang 14.0.0 (clang-1400.0.29.102)] on darwin
    Type "help", "copyright", "credits" or "license" for more information.
    >>> a={'a':1}
    >>> a['a']
    1
    >>> a.a
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: 'dict' object has no attribute 'a'
    

Exception handling


    throwing exception inside the catch clause

    Javascript: the node runtime reports only the exception that occured during the catch clause

        /Users/mmoser/mystuff/jscriptparse/notes/t.js:7
            throw new Error("error during catch");
            ^

        Error: error during catch
            at Object.<anonymous> (/Users/mmoser/mystuff/jscriptparse/notes/t.js:7:11)
            at Module._compile (node:internal/modules/cjs/loader:1218:14)
            at Module._extensions..js (node:internal/modules/cjs/loader:1272:10)
            at Module.load (node:internal/modules/cjs/loader:1081:32)
            at Module._load (node:internal/modules/cjs/loader:922:12)
            at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:82:12)
            at node:internal/main/run_main_module:23:47

        Node.js v19.2.0

    
    raising from catch in python

        def throw_it(msg, n):
            if n>0:
                return throw_it(msg, n-1)

            raise Exception(msg)


        try:

            throw_it("throw-error",4)
            print("hi hi")
            throw_it("raise exception")
        except:
            print("got exception")
            raise

    out:

        Traceback (most recent call last):
          File "t.py", line 13, in <module>
            throw_it("throw-error",4)
          File "t.py", line 6, in throw_it
            return throw_it(msg, n-1)
          File "t.py", line 6, in throw_it
            return throw_it(msg, n-1)
          File "t.py", line 6, in throw_it
            return throw_it(msg, n-1)
          [Previous line repeated 1 more time]
          File "t.py", line 8, in throw_it
            raise Exception(msg)
        Exception: throw-error    

    python: shows both the original exception and the one that occured during the catch clause !!!

    source:
        def throw_it(msg):
            raise Exception(msg)

        try:
            print("hi hi")
            throw_it("raise exception")
        except:
            print("got exception")
            throw_it("raise inside except")

    output:
        hi hi
        got exception
        Traceback (most recent call last):
          File "t.py", line 10, in <module>
            throw_it("raise exception")
          File "t.py", line 5, in throw_it
            raise Exception(msg)
        Exception: raise exception

        During handling of the above exception, another exception occurred:

        Traceback (most recent call last):
          File "t.py", line 13, in <module>
            throw_it("raise inside except")
          File "t.py", line 5, in throw_it
            raise Exception(msg)
        Exception: raise inside except
 
    python does not show the exception if it occurred during finally
    source:
        def throw_it(msg):
            raise Exception(msg)

        try:
            print("hi hi")
            throw_it("raise exception")
        except:
            print("got exception")
        finally:    
            throw_it("raise inside finally")
            output:

    output:
        python t.py
        hi hi
        got exception
        Traceback (most recent call last):
          File "t.py", line 14, in <module>
            throw_it("raise inside finally")
          File "t.py", line 5, in throw_it
            raise Exception(msg)
        Exception: raise inside finally

    The catch with exceptions in python: you can store an exception in a try block, then reraise it from a different point - AND IT SHOWS THE ORIGINAL TRACE AND from where it was    rethrown.
        https://docs.python.org/3/library/exceptions.html
        https://nedbatchelder.com/blog/200711/rethrowing_exceptions_in_python.html


String concat

    python

        >>> "111" + "222"
        '111222'
        >>> "111" + 123
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: can only concatenate str (not "int") to str

    node
        > "aaa" + 123
        'aaa123'
        > "aaa" + "bbb"
        'aaabbb'

    php - has a special operator for string concatenation, does not allow string + number

        php > $a="123";
        php > $b = $a . "456";
        php > echo $b;
        123456
        php > $b = $a + 123;
        PHP Parse error:  syntax error, unexpected '$b' (T_VARIABLE) in php shell code on line 2

        Parse error: syntax error, unexpected '$b' (T_VARIABLE) in php shell code on line 2


Divide by zero

    javascript allows to do that!
        node
        > 1/0
        Infinity
        >

    The others don't

        python
        >>> 1/0
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        ZeroDivisionError: division by zero
        >>>


        php -a

        php > $a=1;
        php > $a=1/0;
        PHP Warning:  Division by zero in php shell code on line 1
        PHP Stack trace:
        PHP   1. {main}() php shell code:0

        Warning: Division by zero in php shell code on line 1

        Call Stack:
           18.9835     393456   1. {main}() php shell code:0


two passes or one? (can you call a functions that is defined later on in the same source file?)

    node does this!
        foo();

        function foo() {
            console.log("hi");
        }

    but node doesn't do this - it's an error.

        foo();

        foo = function() {
            console.log("hi");
        }

    php is ok with this!

        <?php
        foo();

        function foo() {
         echo "hi";
        }

    python gives an error!

        foo()

        def foo():
            print("hi")

        python t.py
        Traceback (most recent call last):
          File "t.py", line 3, in <module>
            foo()
        NameError: name 'foo' is not defined


Passing more arguments then defined in function

    javascript does not enforce it

    node
        Welcome to Node.js v19.2.0.
        Type ".help" for more information.
        > function foo(x) {
        ... console.log("arg: " + x);
        ... }
        undefined
        > foo("123")
        arg: 123
        undefined
        > foo()
        arg: undefined
        undefined
        > foo("123",1,2)
        arg: 123
        undefined

    python requires to pass the exact number of arguments

        python
        >>>
        >>> def foo(x):
        ...     print(x)
        ...
        >>> foo("123")
        123
        >>> foo("123",1)
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: foo() takes 1 positional argument but 2 were given
        object ids
        >>> foo()
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: foo() missing 1 required positional argument: 'x'

    php is also not happy

        php > function foo($a) {
        php {  echo ">{$a}";
        php { }
        php >
        php >
        php > foo(1);
        >1
        php > foo("abc");
        >abc

        php > foo(1,2,3);
        PHP Parse error:  syntax error, unexpected 'foo' (T_STRING) in php shell code on line 2

        Parse error: syntax error, unexpected 'foo' (T_STRING) in php shell code on line 2

        php > foo();
        PHP Warning:  Uncaught ArgumentCountError: Too few arguments to function foo(), 0 passed in php shell code on line 1 and exactly 1 expected in php shell code:1
        Stack trace:
        #0 php shell code(1): foo()
        #1 {main}
          thrown in php shell code on line 1

        Warning: Uncaught ArgumentCountError: Too few arguments to function foo(), 0 passed in php shell code on line 1 and exactly 1 expected in php shell code:1
        Stack trace:
        #0 php shell code(1): foo()
        #1 {main}
          thrown in php shell code on line 1

Object identity  / when is a value copied by value or referenced?

    numbers/booleans are copied by value, strings (and everything else) by reference
    but strings duplicate upon modificatio!

    python
        Type "help", "copyright", "credits" or "license" for more information.
        >>> a="a"
        >>> b=a
        >>> id(a)==id(b)
        True

        >>> a+="a"              # copy on write
        >>> a
        'aa'
        >>> id(a)==id(b)
        False


        >>> class Foo():
            ...     def __init__(self,a):
        ...             self.a=a
        ...
        >>> a=Foo("aaa")
        >>> b=a
        >>> id(b.a) == id(a.a)
        True

        >>> a=1
        >>> b=a
        >>> id(a)==id(b)
        True


Conversion of booleans to numbers

    python3
        >>> a=1
        >>> b=a==1
        >>> print(b)
        True
        >>> b=b+1
        >>> print(b)
        2


    php -a
        Interactive shell

        php > $a=1;
        php > $b=$a==1;
        php > echo "{$b}";
        1
        php > $b=$b+1;
        php > echo "{$b}";
        2

None type / implicit conversions

    javascript has several aliases for them?
        undefined - variable has been defined, but not assigned value
        null - has been assigned something! 
        - but they are equal!!!

    node
        > undefined == null
        true


    python3
        >>> def fun():
        ...     pass
        ...
        >>> a=fun()
        >>> print(a)
        None
        >>> a=a+1
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'


    php -a
        Interactive shell

        php > function foo() {
        php { }
        php > $a=foo();
        php > echo "{$a}";
        php > $a=$a+1;
        php > echo "{$a}";
        1


Multiple assignment

    python3
        >>> def foo():
        ...     return 42
        ...
        >>> a,b = foo()
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: cannot unpack non-iterable int object


    php -a
        php > function foo2() {
        php { return [ 42 ];
        php { }
        php > list($a, $b)=foo2();
        PHP Notice:  Undefined offset: 1 in php shell code on line 1
        PHP Stack trace:
        PHP   1. {main}() php shell code:0

        Notice: Undefined offset: 1 in php shell code on line 1

        Call Stack:
          135.6439     503232   1. {main}() php shell code:0

Is last evaluated statement the return value? 
It is in Ruby and Perl5, not in Python, php, javascript. (in shell you need to echo the value back...)


    irb
    irb(main):001:0> def foo()
    irb(main):002:1> 42
    irb(main):003:1> end
    => :foo
    irb(main):004:0> a=foo()
    => 42

    but not in python, js and php!

    python
    >>> def foo():
    ...     42
    ...
    >>> a=foo()
    >>> print(a)
    None

    >>> def foo():
    ...     return 42
    ...
    >>> a=foo()
    >>> print(a)
    42

    node
    > function foo() {
    ... 42;
    ... }
    undefined
    > a=foo()
    undefined
    > function foo() {
    ... return 42;
    ... }
    undefined
    > a=foo()
    42

When is default function parameter evaluated?
Python - upon function declaration! That makes sense!

    python
    >>> def get_val():
    ...     print("get_val called")
    ...     return 42
    ...
    >>> def foo(a=get_val()):
    ...     print(f"foo called: a: {a}")
    ...
    get_val called

    >>> foo(12)
    foo called: a: 12

    >>> foo(0)
    foo called: a: 0
    >>>

It is also evaluated each time that a closure is created!!! When the function declaration is being evaluated !!!

    >>> def getf():
    ...     def foo(a=get_val()):
    ...             return a+1
    ...     return foo
    ...
    >>> a=getf()
    get_val
    >>> b=getf()
    get_val
    >>> c=getf()
    get_val
    >>> print(c(42))
    43
    >>> print(b(42))
    43
    >>> print(a(42))
    43
        
You can redefined standard library functions in python3

    python
    >>> print("aaa")
    aaa

    >>> import logging
    >>> logging.error("aaa")
    ERROR:root:aaa

    >>> def print(arg):
    ...     logging.error(arg)
    ...
    >>> print("hello world")
    ERROR:root:hello world

    I think the right balance is to allow redefinition of use functions, but to check for redefinition of built-in functions. 


------
async file access

    Javascript:

        node t.js
        !first call result!

        error - type: Error /*object*/  value: Error: ENOENT: no such file or directory, open './Index.html' . data - type: undefined data: undefined

        !second call result!

        error - type: object value: null . data - type: Buffer /*object*/  data: const fs = require('fs');

        function showType(foo) {
            try {
                return foo.constructor.name + " /*object*/ ";
            } catch(e) {

            }
            return typeof(foo);
        }


        fs.readFile('./Index.html', function read(err, data) {
            console.log("!first call result!\n");
            console.log("error - type: " + showType(err) + " value: " + err + " . data - type: " + showType(data) + " data: " + data);
        });


        fs.readFile('./t.js', function read(err, data) {
            console.log("\n!second call result!\n");
            console.log("error - type: " + showType(err) + " value: " + err + " . data - type: " + showType(data) + " data: " + data);
        });

    Output:

        !first call result!

        error - type: Error /*object*/  value: Error: ENOENT: no such file or directory, open './Index.html' . data - type: undefined data: undefined

        !second call result!

        error - type: object value: null . data - type: Buffer /*object*/  data: const fs = require('fs');

        function showType(foo) {
            try {
                return foo.constructor.name + " /*object*/ ";
            } catch(e) {

            }
            return typeof(foo);
        }


        fs.readFile('./Index.html', function read(err, data) {
            console.log("!first call result!\n");
            console.log("error - type: " + showType(err) + " value: " + err + " . data - type: " + showType(data) + " data: " + data);
        });


        fs.readFile('./t.js', function read(err, data) {
            console.log("\n!second call result!\n");
            console.log("error - type: " + showType(err) + " value: " + err + " . data - type: " + showType(data) + " data: " + data);
        });

