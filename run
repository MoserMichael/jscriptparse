#!/usr/bin/env node

const path=require("node:path");
const repl=require("node:repl");
const rt=require(path.join(__dirname,"rt.js"));
const scr=require(path.join(__dirname,"scripty.js"));
const prs=require(path.join(__dirname,"prs.js"));

function skipSpace(data, pos) {
    for(;pos < data.length && prs.isSpace(data.charAt(pos));++pos);
    return pos;
}

function runEvalLoop() {

    let runEvalImp = function() {

        let glob = new rt.Frame();

        let doWrite = function(arg) { return arg };

        let evalIn = function(data, context, filename, callback) {

            let evalPrintMsg = "";

            function logHook(msg) {
                evalPrintMsg += msg;
            }

            rt.setLogHook(logHook);

            try {
                let res = scr.runParserAndEval(data, false, glob, true);

                try {
                    if (res != 0) {
                        evalPrintMsg += JSON.stringify(rt.rtValueToJsVal(res));
                    }
                } catch(e) {
                    // ignore
                }

            } catch(e) {
                if (e instanceof prs.ParserError) {
                    e = e.getDeepest();
                    //console.log(JSON.stringify(e));
                    e.pos = skipSpace(data, e.pos);

                    if (e.pos >= data.length) {
                        return callback(new repl.Recoverable(e));
                    }
                    callback(null,prs.formatParserError(e, data));
                }
            }
            callback(null,evalPrintMsg);
        }

        repl.start({ prompt: "> ", eval: evalIn, writer: doWrite });
    }
    runEvalImp();
}

function evalFile(file) {
    let result = 0;

    if (!scr.runParserAndEval(file, true)) {
        result = 1;
    }

    process.exit(result);
}

function runMain() {

    if (process.argv.length < 3) {
        runEvalLoop()
    } else {
        evalFile(process.argv[2]);
    }

}

runMain();




